-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 21696 microseconds.
   (= 21696 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:           14805.2     0.012065     0.010807     0.016916
Scale:           9665.3     0.017417     0.016554     0.019311
Add:            11113.2     0.022648     0.021596     0.024610
Triad:          11263.4     0.027324     0.021308     0.049122
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 27318 microseconds.
   (= 27318 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:           14739.8     0.015733     0.010855     0.022746
Scale:           9328.3     0.025665     0.017152     0.036718
Add:            11003.6     0.038037     0.021811     0.053032
Triad:          11286.3     0.034490     0.021265     0.053261
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 19144 microseconds.
   (= 19144 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            9352.9     0.020184     0.017107     0.023556
Scale:           8753.2     0.030469     0.018279     0.038063
Add:            10646.3     0.039806     0.022543     0.051552
Triad:          10220.7     0.048651     0.023482     0.055363
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 11080 microseconds.
   (= 11080 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:           13345.4     0.018677     0.011989     0.021082
Scale:           5710.0     0.036131     0.028021     0.038835
Add:             6941.0     0.050364     0.034577     0.054284
Triad:           8782.2     0.046969     0.027328     0.053898
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 13056 microseconds.
   (= 13056 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:           10040.1     0.020820     0.015936     0.024611
Scale:           6769.6     0.035284     0.023635     0.040984
Add:             8763.9     0.047515     0.027385     0.057283
Triad:           9683.6     0.049514     0.024784     0.058361
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 27235 microseconds.
   (= 27235 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:           14938.0     0.019106     0.010711     0.022992
Scale:           9191.2     0.030129     0.017408     0.037237
Add:            10394.1     0.040521     0.023090     0.048601
Triad:          10955.8     0.042170     0.021906     0.051496
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 21181 microseconds.
   (= 21181 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:           11180.9     0.018461     0.014310     0.022227
Scale:           7063.6     0.032789     0.022651     0.038245
Add:             6556.2     0.044682     0.036607     0.049566
Triad:           7038.9     0.042151     0.034096     0.048937
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 24245 microseconds.
   (= 24245 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:           12044.6     0.019057     0.013284     0.023028
Scale:           6618.7     0.031835     0.024174     0.037085
Add:             8190.8     0.043752     0.029301     0.051373
Triad:          10116.8     0.044212     0.023723     0.051591
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 7444 microseconds.
   (= 7444 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            8979.7     0.023415     0.017818     0.025678
Scale:           3832.0     0.047422     0.041754     0.055240
Add:             4086.2     0.065598     0.058734     0.070858
Triad:           4387.3     0.064253     0.054703     0.077981
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 7355 microseconds.
   (= 7355 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            7283.4     0.024734     0.021968     0.026087
Scale:           3941.9     0.044667     0.040590     0.046969
Add:             4170.6     0.065102     0.057546     0.069281
Triad:           4396.2     0.063106     0.054592     0.068062
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 7395 microseconds.
   (= 7395 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            8821.2     0.023790     0.018138     0.025622
Scale:           4654.4     0.042278     0.034376     0.045355
Add:             3982.8     0.069993     0.060259     0.074986
Triad:           4166.9     0.063960     0.057597     0.066821
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 14405 microseconds.
   (= 14405 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            7166.9     0.025289     0.022325     0.026945
Scale:           4074.0     0.043188     0.039273     0.044942
Add:             4246.3     0.064653     0.056520     0.069167
Triad:           4430.8     0.064530     0.054166     0.069193
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 9429 microseconds.
   (= 9429 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            7436.6     0.024105     0.021515     0.025117
Scale:           3761.6     0.047153     0.042535     0.049389
Add:             4129.0     0.066816     0.058126     0.070921
Triad:           4367.5     0.061342     0.054951     0.065197
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
This system uses 8 bytes per array element.
-------------------------------------------------------------
-------------------------------------------------------------
This system uses 8 bytes per array element.
Array size = 10000000 (elements), Offset = 0 (elements)
-------------------------------------------------------------
Memory per array = 76.3 MiB (= 0.1 GiB).
Array size = 10000000 (elements), Offset = 0 (elements)
Total memory required = 228.9 MiB (= 0.2 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Each kernel will be executed 10 times.
Total memory required = 228.9 MiB (= 0.2 GiB).
 The *best* time for each kernel (excluding the first iteration)
Each kernel will be executed 10 times.
 will be used to compute the reported bandwidth.
 The *best* time for each kernel (excluding the first iteration)
-------------------------------------------------------------
 will be used to compute the reported bandwidth.
Your clock granularity/precision appears to be 1 microseconds.
-------------------------------------------------------------
Each test below will take on the order of 9083 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
   (= 9083 clock ticks)
Each test below will take on the order of 19661 microseconds.
Increase the size of the arrays if this shows that
   (= 19661 clock ticks)
you are not getting at least 20 clock ticks per test.
Increase the size of the arrays if this shows that
-------------------------------------------------------------
you are not getting at least 20 clock ticks per test.
WARNING -- The above is only a rough guideline.
-------------------------------------------------------------
For best results, please be sure you know the
WARNING -- The above is only a rough guideline.
precision of your system timer.
For best results, please be sure you know the
-------------------------------------------------------------
precision of your system timer.
Function    Best Rate MB/s  Avg time     Min time     Max time
-------------------------------------------------------------
Copy:            7009.6     0.025352     0.022826     0.026893
Function    Best Rate MB/s  Avg time     Min time     Max time
Scale:           3857.0     0.046844     0.041483     0.049770
Copy:            7584.0     0.024276     0.021097     0.025760
Add:             4326.5     0.063152     0.055472     0.066745
Scale:           4308.6     0.043348     0.037135     0.052130
Triad:           4286.9     0.063186     0.055984     0.066987
Add:             4471.6     0.065275     0.053672     0.070989
-------------------------------------------------------------
Triad:           6289.5     0.062919     0.038159     0.069963
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 15522 microseconds.
   (= 15522 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            7063.3     0.025129     0.022652     0.026640
Scale:           3966.3     0.046198     0.040340     0.049059
Add:             4356.6     0.062440     0.055089     0.066297
Triad:           4444.4     0.064470     0.054000     0.068434
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 22143 microseconds.
   (= 22143 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            7268.8     0.025086     0.022012     0.027039
Scale:           4255.9     0.043061     0.037595     0.045588
Add:             4388.6     0.061799     0.054687     0.065715
Triad:           4961.7     0.066883     0.048370     0.072249
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 11535 microseconds.
   (= 11535 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            7592.6     0.024172     0.021073     0.026284
Scale:           4557.4     0.047540     0.035108     0.052358
Add:             5158.7     0.060679     0.046523     0.067110
Triad:           5387.3     0.058597     0.044549     0.065594
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 15891 microseconds.
   (= 15891 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            6928.2     0.025559     0.023094     0.027022
Scale:           3943.4     0.045614     0.040574     0.047868
Add:             4261.5     0.065319     0.056318     0.068719
Triad:           4933.9     0.063367     0.048643     0.067996
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 7291 microseconds.
   (= 7291 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            7164.9     0.025693     0.022331     0.027443
Scale:           3837.9     0.048109     0.041690     0.051718
Add:             4198.4     0.064908     0.057165     0.068051
Triad:           4643.2     0.064329     0.051689     0.069074
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 9857 microseconds.
   (= 9857 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            7266.1     0.025716     0.022020     0.027406
Scale:           4051.1     0.044258     0.039495     0.046722
Add:             3971.5     0.068259     0.060430     0.072131
Triad:           4300.5     0.063465     0.055808     0.066731
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
STREAM version $Revision: 5.10 $
Each test below will take on the order of 19887 microseconds.
-------------------------------------------------------------
   (= 19887 clock ticks)
This system uses 8 bytes per array element.
Increase the size of the arrays if this shows that
-------------------------------------------------------------
you are not getting at least 20 clock ticks per test.
Array size = 10000000 (elements), Offset = 0 (elements)
-------------------------------------------------------------
Memory per array = 76.3 MiB (= 0.1 GiB).
WARNING -- The above is only a rough guideline.
Total memory required = 228.9 MiB (= 0.2 GiB).
For best results, please be sure you know the
Each kernel will be executed 10 times.
precision of your system timer.
 The *best* time for each kernel (excluding the first iteration)
-------------------------------------------------------------
 will be used to compute the reported bandwidth.
Function    Best Rate MB/s  Avg time     Min time     Max time
-------------------------------------------------------------
Copy:            7529.1     0.025889     0.021251     0.028273
Your clock granularity/precision appears to be 1 microseconds.
Scale:           4698.8     0.042405     0.034051     0.047021
Each test below will take on the order of 18013 microseconds.
Add:             5245.6     0.059135     0.045753     0.065428
   (= 18013 clock ticks)
Triad:           5687.6     0.061789     0.042197     0.069890
Increase the size of the arrays if this shows that
-------------------------------------------------------------
you are not getting at least 20 clock ticks per test.
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            7246.7     0.025531     0.022079     0.027493
Scale:           4078.3     0.043444     0.039232     0.045667
Add:             4353.8     0.065234     0.055124     0.069248
Triad:           5490.9     0.065423     0.043709     0.071288
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 11875 microseconds.
   (= 11875 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
-------------------------------------------------------------
Copy:            7329.7     0.025139     0.021829     0.027244
STREAM version $Revision: 5.10 $
Scale:           4585.6     0.045740     0.034892     0.050499
-------------------------------------------------------------
Add:             4968.3     0.060170     0.048306     0.065787
This system uses 8 bytes per array element.
Triad:           5092.1     0.060696     0.047132     0.067431
-------------------------------------------------------------
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Memory per array = 76.3 MiB (= 0.1 GiB).
-------------------------------------------------------------
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 8888 microseconds.
   (= 8888 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            7084.0     0.026292     0.022586     0.028024
Scale:           4055.8     0.044397     0.039450     0.046892
Add:             3991.5     0.067865     0.060128     0.071153
Triad:           4296.4     0.064098     0.055861     0.067346
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 14707 microseconds.
   (= 14707 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
For best results, please be sure you know the
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
precision of your system timer.
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
-------------------------------------------------------------
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
Function    Best Rate MB/s  Avg time     Min time     Max time
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
-------------------------------------------------------------
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
-------------------------------------------------------------
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
-------------------------------------------------------------
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
Copy:            9472.5     0.023485     0.016891     0.026959
-------------------------------------------------------------
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
Scale:           5099.4     0.045043     0.031376     0.052091
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Add:             5394.5     0.059713     0.044490     0.066845
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Triad:           6439.9     0.059193     0.037268     0.066668
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
-------------------------------------------------------------
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
Solution Validates: avg error less than 1.000000e-13 on all three arrays
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
-------------------------------------------------------------
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 29844 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 28074 microseconds.
Each test below will take on the order of 21534 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 23890 microseconds.
Each test below will take on the order of 34275 microseconds.
Each test below will take on the order of 20970 microseconds.
Each test below will take on the order of 15187 microseconds.
Each test below will take on the order of 35691 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 30779 microseconds.
Each test below will take on the order of 35404 microseconds.
Each test below will take on the order of 28748 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 29502 microseconds.
Each test below will take on the order of 20926 microseconds.
Each test below will take on the order of 25379 microseconds.
Each test below will take on the order of 21694 microseconds.
Each test below will take on the order of 29376 microseconds.
Each test below will take on the order of 27422 microseconds.
Each test below will take on the order of 30517 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 28677 microseconds.
Each test below will take on the order of 25972 microseconds.
Each test below will take on the order of 15622 microseconds.
Each test below will take on the order of 15101 microseconds.
Each test below will take on the order of 30318 microseconds.
Each test below will take on the order of 30688 microseconds.
Each test below will take on the order of 16681 microseconds.
   (= 29844 clock ticks)
Each test below will take on the order of 30185 microseconds.
   (= 28074 clock ticks)
   (= 21534 clock ticks)
Each test below will take on the order of 28934 microseconds.
   (= 23890 clock ticks)
   (= 34275 clock ticks)
   (= 20970 clock ticks)
   (= 15187 clock ticks)
   (= 35691 clock ticks)
Each test below will take on the order of 31422 microseconds.
   (= 30779 clock ticks)
   (= 35404 clock ticks)
   (= 28748 clock ticks)
Each test below will take on the order of 26658 microseconds.
   (= 29502 clock ticks)
   (= 20926 clock ticks)
   (= 25379 clock ticks)
   (= 21694 clock ticks)
   (= 29376 clock ticks)
   (= 27422 clock ticks)
   (= 30517 clock ticks)
Each test below will take on the order of 24294 microseconds.
   (= 28677 clock ticks)
   (= 25972 clock ticks)
   (= 15622 clock ticks)
   (= 15101 clock ticks)
   (= 30318 clock ticks)
   (= 30688 clock ticks)
   (= 16681 clock ticks)
Increase the size of the arrays if this shows that
   (= 30185 clock ticks)
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
   (= 28934 clock ticks)
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
   (= 31422 clock ticks)
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
   (= 26658 clock ticks)
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
   (= 24294 clock ticks)
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
-------------------------------------------------------------
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
For best results, please be sure you know the
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
For best results, please be sure you know the
For best results, please be sure you know the
For best results, please be sure you know the
For best results, please be sure you know the
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
For best results, please be sure you know the
For best results, please be sure you know the
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
For best results, please be sure you know the
For best results, please be sure you know the
For best results, please be sure you know the
For best results, please be sure you know the
For best results, please be sure you know the
For best results, please be sure you know the
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
For best results, please be sure you know the
For best results, please be sure you know the
For best results, please be sure you know the
For best results, please be sure you know the
For best results, please be sure you know the
For best results, please be sure you know the
precision of your system timer.
For best results, please be sure you know the
precision of your system timer.
precision of your system timer.
For best results, please be sure you know the
precision of your system timer.
precision of your system timer.
precision of your system timer.
precision of your system timer.
precision of your system timer.
For best results, please be sure you know the
precision of your system timer.
precision of your system timer.
precision of your system timer.
For best results, please be sure you know the
precision of your system timer.
precision of your system timer.
precision of your system timer.
precision of your system timer.
precision of your system timer.
precision of your system timer.
precision of your system timer.
For best results, please be sure you know the
precision of your system timer.
precision of your system timer.
precision of your system timer.
precision of your system timer.
precision of your system timer.
precision of your system timer.
precision of your system timer.
-------------------------------------------------------------
precision of your system timer.
-------------------------------------------------------------
-------------------------------------------------------------
precision of your system timer.
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
precision of your system timer.
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
precision of your system timer.
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
precision of your system timer.
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            8167.9     0.025164     0.019589     0.029313
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            8211.4     0.025613     0.019485     0.029711
Copy:            7330.7     0.024535     0.021826     0.025751
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:           10306.0     0.026163     0.015525     0.030199
Copy:            8342.0     0.024095     0.019180     0.030258
Copy:            7960.5     0.025347     0.020099     0.028540
Copy:            7291.3     0.024767     0.021944     0.026367
Copy:            6795.5     0.027266     0.023545     0.030160
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            8204.3     0.026324     0.019502     0.032050
Copy:            6808.2     0.026599     0.023501     0.029239
Copy:            8442.4     0.027308     0.018952     0.033624
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            7207.2     0.026761     0.022200     0.031589
Copy:            7717.2     0.025140     0.020733     0.027687
Copy:            8154.6     0.025906     0.019621     0.029047
Copy:            7344.8     0.024111     0.021784     0.026417
Copy:           12151.5     0.028093     0.013167     0.031591
Copy:            7529.7     0.026368     0.021249     0.033261
Copy:            6323.4     0.027973     0.025303     0.030169
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            6546.9     0.027483     0.024439     0.029717
Copy:            7974.8     0.025283     0.020063     0.028629
Copy:            9342.1     0.023905     0.017127     0.028329
Copy:            7511.0     0.024203     0.021302     0.026814
Copy:           10259.7     0.025866     0.015595     0.032127
Copy:           10651.0     0.023709     0.015022     0.032338
Copy:            5962.1     0.028319     0.026836     0.029742
Scale:           4936.3     0.041224     0.032413     0.047103
Copy:           26186.8     0.022372     0.006110     0.033294
Scale:           4900.9     0.041674     0.032647     0.047691
Scale:           4144.5     0.043652     0.038605     0.046142
Copy:           12194.3     0.028206     0.013121     0.031742
Scale:           4918.6     0.041964     0.032530     0.049037
Scale:           6462.8     0.042629     0.024757     0.048361
Scale:           5570.4     0.042282     0.028723     0.049626
Scale:           3950.9     0.045344     0.040497     0.047628
Scale:           4873.2     0.043844     0.032833     0.048215
Copy:           13790.8     0.023799     0.011602     0.031267
Scale:           4947.0     0.042353     0.032343     0.050037
Scale:           4737.8     0.044664     0.033771     0.049026
Scale:           5066.0     0.041981     0.031583     0.049056
Copy:           12054.5     0.028719     0.013273     0.032325
Scale:           6085.0     0.042357     0.026294     0.047950
Scale:           4850.0     0.041460     0.032990     0.045148
Scale:           5632.8     0.041202     0.028405     0.045961
Scale:           4093.7     0.048521     0.039085     0.051859
Scale:           8236.8     0.041941     0.019425     0.047390
Scale:           5065.0     0.042189     0.031589     0.054517
Scale:           4292.9     0.043156     0.037271     0.045540
Copy:           12103.0     0.029949     0.013220     0.033752
Scale:           4214.9     0.043887     0.037961     0.046126
Scale:           4851.3     0.041742     0.032981     0.046700
Scale:           5024.8     0.044880     0.031842     0.051184
Scale:           3924.0     0.048402     0.040775     0.052370
Scale:           5861.9     0.041243     0.027295     0.049474
Scale:           8267.9     0.039361     0.019352     0.048060
Scale:           4376.0     0.044863     0.036563     0.048872
Add:             5517.1     0.057835     0.043501     0.065714
Scale:          20825.1     0.039339     0.007683     0.060748
Add:             5524.1     0.058329     0.043446     0.065741
Add:             4468.4     0.066837     0.053711     0.071705
Scale:           8225.4     0.042279     0.019452     0.047997
Add:             5472.0     0.057782     0.043860     0.065868
Add:             8771.3     0.056050     0.027362     0.067856
Add:             5823.8     0.059897     0.041210     0.065896
Add:             4295.4     0.063913     0.055874     0.067298
Add:             5748.0     0.060305     0.041754     0.066305
Scale:           9094.5     0.038905     0.017593     0.047483
Add:             6252.1     0.057185     0.038387     0.065759
Add:             6765.1     0.059717     0.035476     0.066773
Add:             5710.4     0.056423     0.042029     0.065351
Scale:           8191.2     0.042999     0.019533     0.049267
Add:             6830.8     0.060193     0.035135     0.068313
Add:             5306.1     0.059590     0.045231     0.065242
Add:             6740.6     0.058808     0.035605     0.066192
Add:             6724.4     0.060732     0.035691     0.067734
Add:             9619.6     0.057379     0.024949     0.065282
Add:             6617.2     0.056886     0.036269     0.073184
Add:             6871.1     0.059626     0.034929     0.066346
Scale:           8139.2     0.042052     0.019658     0.047406
Add:             5051.6     0.060984     0.047510     0.066092
Add:             5044.3     0.061137     0.047578     0.066122
Add:             5079.3     0.062086     0.047251     0.066563
Add:             4910.1     0.061940     0.048879     0.066646
Add:             5694.5     0.055452     0.042146     0.065711
Add:             9979.2     0.061683     0.024050     0.093265
Add:             6773.6     0.060507     0.035432     0.067387
Triad:           5865.3     0.055220     0.040919     0.065553
Add:            32836.4     0.059631     0.007309     0.095763
Triad:           6436.2     0.054609     0.037289     0.062365
Triad:           6326.1     0.064056     0.037938     0.070935
Add:            10480.8     0.057395     0.022899     0.065326
Triad:           5830.4     0.053063     0.041163     0.062340
Triad:          10003.3     0.056507     0.023992     0.067510
Triad:           7083.6     0.056391     0.033881     0.066932
Triad:           4904.4     0.067196     0.048936     0.072581
Triad:           8731.8     0.059619     0.027486     0.067513
Add:            10538.3     0.058118     0.022774     0.071365
Triad:           7189.3     0.055475     0.033383     0.063032
Triad:           7767.5     0.059368     0.030898     0.066877
Triad:           6689.5     0.054043     0.035877     0.062976
Add:             8934.6     0.057837     0.026862     0.065225
Triad:           9789.2     0.062883     0.024517     0.072148
Triad:           5311.4     0.064740     0.045186     0.073309
Triad:           7708.6     0.062124     0.031134     0.070566
Triad:           7228.3     0.058150     0.033203     0.064906
Triad:          11256.5     0.056411     0.021321     0.067348
Triad:           8220.4     0.057546     0.029196     0.069048
Triad:           7454.1     0.060842     0.032197     0.069239
Add:             6622.9     0.058728     0.036238     0.065514
Triad:           6757.7     0.060564     0.035515     0.068757
Triad:           9115.4     0.060920     0.026329     0.071013
Triad:           5480.7     0.061128     0.043790     0.068912
Triad:           6999.0     0.058574     0.034291     0.065333
Triad:           6735.9     0.055418     0.035630     0.063010
Triad:          10322.1     0.058886     0.023251     0.072174
Triad:           7618.8     0.060695     0.031501     0.068077
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
Triad:          11426.9     0.057217     0.021003     0.066503
-------------------------------------------------------------
Triad:          26443.0     0.066787     0.009076     0.149452
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
Triad:          14325.8     0.063877     0.016753     0.137718
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
Triad:           6982.4     0.056753     0.034372     0.065153
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
Triad:          10323.0     0.056963     0.023249     0.065869
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
START OF JOBSPEC
{"resources": [{"type": "node", "count": 1, "with": [{"type": "slot", "count": 56, "with": [{"type": "core", "count": 1}], "label": "task"}]}], "tasks": [{"command": ["stream_c.exe"], "slot": "task", "count": {"per_slot": 1}}], "attributes": {"system": {"duration": 0, "cwd": "/opt/stream", "shell": {"options": {"rlimit": {"cpu": -1, "fsize": -1, "data": -1, "stack": 8388608, "core": -1, "nofile": 1048576, "as": -1, "rss": -1, "nproc": -1}, "cpu-affinity": "per-task"}}, "constraints": {"hostlist": ["flux-sample-198"]}}, "user": {"study_id": "stream-1-iter-2-node-198"}}, "version": 1}
START OF EVENTLOG
{"timestamp":1724465653.5212114,"name":"init"}
{"timestamp":1724465653.5238059,"name":"starting"}
{"timestamp":1724465653.5587852,"name":"shell.init","context":{"service":"0-shell-ftp6REgf","leader-rank":198,"size":1}}
{"timestamp":1724465653.84605,"name":"shell.start","context":{"taskmap":{"version":1,"map":[[0,1,56,1]]}}}
{"timestamp":1724465654.9370999,"name":"shell.task-exit","context":{"localid":52,"rank":52,"state":"Exited","pid":177,"wait_status":0,"signaled":0,"exitcode":0}}
{"timestamp":1724465656.1296647,"name":"complete","context":{"status":0}}
{"timestamp":1724465656.1296794,"name":"done"}

