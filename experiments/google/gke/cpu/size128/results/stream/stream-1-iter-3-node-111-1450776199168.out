-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 17499 microseconds.
   (= 17499 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:           14477.2     0.015368     0.011052     0.021111
Scale:           9232.1     0.025576     0.017331     0.037945
Add:            11048.2     0.035109     0.021723     0.052527
Triad:          10723.9     0.037198     0.022380     0.053975
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 14374 microseconds.
   (= 14374 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:           15108.5     0.012333     0.010590     0.019940
Scale:           9498.9     0.021565     0.016844     0.037031
Add:            11065.1     0.030230     0.021690     0.055283
Triad:          11259.6     0.031682     0.021315     0.053538
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 12697 microseconds.
   (= 12697 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:           13978.7     0.017986     0.011446     0.021075
Scale:           9128.3     0.029076     0.017528     0.038594
Add:            10840.1     0.040628     0.022140     0.052575
Triad:          10861.1     0.041914     0.022097     0.054823
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 23422 microseconds.
   (= 23422 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:           13909.4     0.017402     0.011503     0.020691
Scale:           9179.5     0.028763     0.017430     0.034964
Add:            10557.8     0.042491     0.022732     0.055523
Triad:          10536.5     0.042412     0.022778     0.053981
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 12351 microseconds.
   (= 12351 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:           12812.4     0.018850     0.012488     0.021363
Scale:           8046.6     0.032875     0.019884     0.036866
Add:             8915.7     0.046663     0.026919     0.053235
Triad:           9608.9     0.045541     0.024977     0.052744
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 20563 microseconds.
   (= 20563 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:           14111.8     0.017750     0.011338     0.023935
Scale:           9056.0     0.029590     0.017668     0.036576
Add:            10585.7     0.041668     0.022672     0.054158
Triad:          10553.1     0.039867     0.022742     0.056580
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 23391 microseconds.
   (= 23391 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:           11969.8     0.017693     0.013367     0.021533
Scale:           9168.0     0.032665     0.017452     0.042255
Add:             8952.6     0.042981     0.026808     0.053670
Triad:           9606.2     0.043624     0.024984     0.053442
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 20144 microseconds.
   (= 20144 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:           12454.1     0.018865     0.012847     0.022900
Scale:           8358.6     0.031796     0.019142     0.037053
Add:            10569.4     0.043603     0.022707     0.051612
Triad:          10442.5     0.045496     0.022983     0.055294
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 7166 microseconds.
   (= 7166 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            7088.1     0.025323     0.022573     0.027252
Scale:           4117.7     0.043820     0.038857     0.045941
Add:             3999.0     0.067723     0.060015     0.071211
Triad:           4351.2     0.062037     0.055157     0.066988
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 7776 microseconds.
   (= 7776 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            7087.8     0.025575     0.022574     0.027344
Scale:           4150.8     0.042783     0.038547     0.044876
Add:             3971.2     0.067827     0.060435     0.071697
Triad:           4382.2     0.062669     0.054767     0.068004
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 7462 microseconds.
   (= 7462 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            7651.8     0.024595     0.020910     0.026042
Scale:           4196.3     0.045122     0.038129     0.047970
Add:             4075.8     0.066975     0.058884     0.070827
Triad:           4117.6     0.064616     0.058286     0.067786
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 17703 microseconds.
   (= 17703 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            7060.5     0.026052     0.022661     0.027919
Scale:           4133.3     0.043333     0.038710     0.046789
Add:             4446.5     0.064731     0.053975     0.070073
Triad:           5159.2     0.061889     0.046519     0.067360
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 18209 microseconds.
   (= 18209 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            7034.8     0.025943     0.022744     0.028050
Scale:           4111.7     0.042966     0.038913     0.046475
Add:             4415.4     0.065368     0.054355     0.070851
Triad:           5566.5     0.061551     0.043115     0.067130
-------------------------------------------------------------
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 9977 microseconds.
   (= 9977 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            7175.8     0.025294     0.022297     0.026473
Scale:           3965.3     0.046676     0.040350     0.049908
Add:             4097.3     0.065246     0.058575     0.069574
Triad:           4400.4     0.061113     0.054541     0.065564
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 9747 microseconds.
   (= 9747 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            7110.8     0.025453     0.022501     0.027268
Scale:           3938.1     0.046756     0.040629     0.050336
Add:             4126.5     0.064486     0.058161     0.069109
Triad:           4362.5     0.061640     0.055014     0.066058
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 7265 microseconds.
   (= 7265 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            7745.5     0.024817     0.020657     0.026589
Scale:           4023.4     0.044270     0.039767     0.046474
Add:             4003.5     0.067699     0.059947     0.071343
Triad:           4244.6     0.066299     0.056542     0.070252
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 11545 microseconds.
   (= 11545 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            8402.1     0.024156     0.019043     0.026791
Scale:           5305.9     0.045265     0.030155     0.050916
Add:             5232.8     0.061665     0.045865     0.067485
Triad:           5533.8     0.059489     0.043370     0.067197
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 16137 microseconds.
   (= 16137 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            6972.6     0.025544     0.022947     0.026794
Scale:           4122.5     0.044935     0.038811     0.049750
Add:             4379.4     0.062417     0.054802     0.069672
Triad:           4576.3     0.066314     0.052444     0.073283
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 18980 microseconds.
   (= 18980 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            6974.2     0.024839     0.022942     0.026227
Scale:           4182.8     0.042597     0.038252     0.046263
Add:             4398.4     0.061334     0.054565     0.065740
Triad:           4626.2     0.067818     0.051878     0.074418
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 11043 microseconds.
   (= 11043 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            8734.2     0.023678     0.018319     0.027051
Scale:           5115.1     0.045714     0.031280     0.050676
Add:             5165.5     0.064340     0.046462     0.069311
Triad:           5506.7     0.059998     0.043583     0.065380
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 15515 microseconds.
   (= 15515 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            7384.5     0.024534     0.021667     0.026008
Scale:           3991.6     0.045423     0.040084     0.047860
Add:             4271.4     0.065747     0.056187     0.069482
Triad:           4903.6     0.065143     0.048944     0.070135
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 21654 microseconds.
   (= 21654 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            9056.9     0.024772     0.017666     0.028058
Scale:           4943.2     0.041896     0.032368     0.045825
Add:             5431.8     0.059147     0.044184     0.065463
Triad:           5639.1     0.062751     0.042560     0.072820
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 9711 microseconds.
   (= 9711 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            7171.1     0.026508     0.022312     0.027919
Scale:           3896.9     0.046186     0.041058     0.048727
Add:             4083.4     0.065925     0.058775     0.069419
Triad:           4312.7     0.063744     0.055649     0.067150
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 8909 microseconds.
   (= 8909 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
precision of your system timer.
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
This system uses 8 bytes per array element.
STREAM version $Revision: 5.10 $
This system uses 8 bytes per array element.
STREAM version $Revision: 5.10 $
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
STREAM version $Revision: 5.10 $
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
STREAM version $Revision: 5.10 $
Copy:            7053.5     0.026984     0.022684     0.028614
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
STREAM version $Revision: 5.10 $
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
STREAM version $Revision: 5.10 $
This system uses 8 bytes per array element.
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
Scale:           3910.7     0.046304     0.040913     0.048922
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
This system uses 8 bytes per array element.
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
This system uses 8 bytes per array element.
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
This system uses 8 bytes per array element.
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
This system uses 8 bytes per array element.
Add:             4076.8     0.065909     0.058870     0.069514
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
This system uses 8 bytes per array element.
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
This system uses 8 bytes per array element.
Array size = 10000000 (elements), Offset = 0 (elements)
-------------------------------------------------------------
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
-------------------------------------------------------------
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
-------------------------------------------------------------
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
-------------------------------------------------------------
Triad:           4298.8     0.063982     0.055830     0.067305
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
-------------------------------------------------------------
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
-------------------------------------------------------------
-------------------------------------------------------------
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
-------------------------------------------------------------
Memory per array = 76.3 MiB (= 0.1 GiB).
Array size = 10000000 (elements), Offset = 0 (elements)
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Array size = 10000000 (elements), Offset = 0 (elements)
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Array size = 10000000 (elements), Offset = 0 (elements)
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Array size = 10000000 (elements), Offset = 0 (elements)
-------------------------------------------------------------
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Array size = 10000000 (elements), Offset = 0 (elements)
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Array size = 10000000 (elements), Offset = 0 (elements)
Total memory required = 228.9 MiB (= 0.2 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Memory per array = 76.3 MiB (= 0.1 GiB).
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Memory per array = 76.3 MiB (= 0.1 GiB).
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Memory per array = 76.3 MiB (= 0.1 GiB).
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Memory per array = 76.3 MiB (= 0.1 GiB).
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Memory per array = 76.3 MiB (= 0.1 GiB).
Each kernel will be executed 10 times.
Total memory required = 228.9 MiB (= 0.2 GiB).
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
Total memory required = 228.9 MiB (= 0.2 GiB).
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
Total memory required = 228.9 MiB (= 0.2 GiB).
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
Total memory required = 228.9 MiB (= 0.2 GiB).
-------------------------------------------------------------
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
Total memory required = 228.9 MiB (= 0.2 GiB).
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
Total memory required = 228.9 MiB (= 0.2 GiB).
 The *best* time for each kernel (excluding the first iteration)
Each kernel will be executed 10 times.
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
Each kernel will be executed 10 times.
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
Each kernel will be executed 10 times.
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
Each kernel will be executed 10 times.
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
Each kernel will be executed 10 times.
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
Each kernel will be executed 10 times.
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
 The *best* time for each kernel (excluding the first iteration)
-------------------------------------------------------------
-------------------------------------------------------------
 The *best* time for each kernel (excluding the first iteration)
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
 The *best* time for each kernel (excluding the first iteration)
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
-------------------------------------------------------------
-------------------------------------------------------------
 The *best* time for each kernel (excluding the first iteration)
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
 will be used to compute the reported bandwidth.
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
 will be used to compute the reported bandwidth.
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
 will be used to compute the reported bandwidth.
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
 will be used to compute the reported bandwidth.
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 30614 microseconds.
Each test below will take on the order of 21527 microseconds.
Each test below will take on the order of 15272 microseconds.
Each test below will take on the order of 30676 microseconds.
Each test below will take on the order of 32001 microseconds.
-------------------------------------------------------------
Each test below will take on the order of 15470 microseconds.
Each test below will take on the order of 31416 microseconds.
-------------------------------------------------------------
Each test below will take on the order of 19732 microseconds.
Each test below will take on the order of 28779 microseconds.
Each test below will take on the order of 25392 microseconds.
Each test below will take on the order of 16689 microseconds.
Each test below will take on the order of 24033 microseconds.
Each test below will take on the order of 32448 microseconds.
Each test below will take on the order of 36330 microseconds.
-------------------------------------------------------------
-------------------------------------------------------------
Each test below will take on the order of 35470 microseconds.
Each test below will take on the order of 20400 microseconds.
Each test below will take on the order of 33821 microseconds.
Each test below will take on the order of 26039 microseconds.
-------------------------------------------------------------
Each test below will take on the order of 25556 microseconds.
Each test below will take on the order of 25709 microseconds.
Each test below will take on the order of 29751 microseconds.
-------------------------------------------------------------
-------------------------------------------------------------
Each test below will take on the order of 28622 microseconds.
Each test below will take on the order of 15613 microseconds.
-------------------------------------------------------------
Each test below will take on the order of 16417 microseconds.
   (= 30614 clock ticks)
   (= 21527 clock ticks)
   (= 15272 clock ticks)
   (= 30676 clock ticks)
   (= 32001 clock ticks)
Your clock granularity/precision appears to be 1 microseconds.
   (= 15470 clock ticks)
   (= 31416 clock ticks)
Your clock granularity/precision appears to be 1 microseconds.
   (= 19732 clock ticks)
   (= 28779 clock ticks)
   (= 25392 clock ticks)
   (= 16689 clock ticks)
   (= 24033 clock ticks)
   (= 32448 clock ticks)
   (= 36330 clock ticks)
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
   (= 35470 clock ticks)
   (= 20400 clock ticks)
   (= 33821 clock ticks)
   (= 26039 clock ticks)
Your clock granularity/precision appears to be 1 microseconds.
   (= 25556 clock ticks)
   (= 25709 clock ticks)
   (= 29751 clock ticks)
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
   (= 28622 clock ticks)
   (= 15613 clock ticks)
Your clock granularity/precision appears to be 1 microseconds.
   (= 16417 clock ticks)
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
Each test below will take on the order of 27698 microseconds.
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
Each test below will take on the order of 32088 microseconds.
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
Each test below will take on the order of 27322 microseconds.
Each test below will take on the order of 27550 microseconds.
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
Each test below will take on the order of 30164 microseconds.
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
Each test below will take on the order of 28121 microseconds.
Each test below will take on the order of 31297 microseconds.
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
Each test below will take on the order of 31512 microseconds.
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
   (= 32088 clock ticks)
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
   (= 27322 clock ticks)
   (= 27550 clock ticks)
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
   (= 30164 clock ticks)
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
   (= 28121 clock ticks)
   (= 31297 clock ticks)
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
   (= 31512 clock ticks)
   (= 27698 clock ticks)
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
-------------------------------------------------------------
Increase the size of the arrays if this shows that
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
Increase the size of the arrays if this shows that
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
you are not getting at least 20 clock ticks per test.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
you are not getting at least 20 clock ticks per test.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
For best results, please be sure you know the
-------------------------------------------------------------
For best results, please be sure you know the
For best results, please be sure you know the
For best results, please be sure you know the
For best results, please be sure you know the
For best results, please be sure you know the
For best results, please be sure you know the
For best results, please be sure you know the
For best results, please be sure you know the
-------------------------------------------------------------
-------------------------------------------------------------
For best results, please be sure you know the
For best results, please be sure you know the
For best results, please be sure you know the
For best results, please be sure you know the
-------------------------------------------------------------
For best results, please be sure you know the
For best results, please be sure you know the
For best results, please be sure you know the
For best results, please be sure you know the
For best results, please be sure you know the
-------------------------------------------------------------
-------------------------------------------------------------
For best results, please be sure you know the
For best results, please be sure you know the
For best results, please be sure you know the
For best results, please be sure you know the
-------------------------------------------------------------
-------------------------------------------------------------
For best results, please be sure you know the
precision of your system timer.
precision of your system timer.
WARNING -- The above is only a rough guideline.
precision of your system timer.
precision of your system timer.
precision of your system timer.
precision of your system timer.
precision of your system timer.
precision of your system timer.
precision of your system timer.
precision of your system timer.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
precision of your system timer.
precision of your system timer.
precision of your system timer.
precision of your system timer.
WARNING -- The above is only a rough guideline.
precision of your system timer.
precision of your system timer.
precision of your system timer.
precision of your system timer.
precision of your system timer.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
precision of your system timer.
precision of your system timer.
precision of your system timer.
precision of your system timer.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
precision of your system timer.
-------------------------------------------------------------
-------------------------------------------------------------
For best results, please be sure you know the
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
For best results, please be sure you know the
For best results, please be sure you know the
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
For best results, please be sure you know the
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
For best results, please be sure you know the
For best results, please be sure you know the
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
For best results, please be sure you know the
For best results, please be sure you know the
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
precision of your system timer.
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
precision of your system timer.
precision of your system timer.
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
precision of your system timer.
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
precision of your system timer.
precision of your system timer.
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
precision of your system timer.
precision of your system timer.
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            7127.3     0.025441     0.022449     0.026863
Copy:            8374.8     0.024645     0.019105     0.030771
-------------------------------------------------------------
Copy:            7225.1     0.024944     0.022145     0.026032
Copy:            7531.2     0.025388     0.021245     0.033341
Copy:            7652.6     0.026253     0.020908     0.028882
Copy:            7263.1     0.025598     0.022029     0.028050
Copy:            8243.2     0.024840     0.019410     0.030754
Copy:            7315.3     0.025596     0.021872     0.028368
Copy:            8320.4     0.025478     0.019230     0.031033
Copy:            6157.2     0.028388     0.025986     0.029833
-------------------------------------------------------------
-------------------------------------------------------------
Copy:            6156.5     0.028677     0.025989     0.030249
Copy:            8448.2     0.024976     0.018939     0.027917
Copy:            8998.4     0.025281     0.017781     0.030487
Copy:            5687.1     0.030721     0.028134     0.032455
-------------------------------------------------------------
Copy:            9138.7     0.026629     0.017508     0.033142
Copy:            5689.9     0.030271     0.028120     0.031598
Copy:            7609.3     0.026476     0.021027     0.029045
Copy:            7696.8     0.027752     0.020788     0.033773
Copy:            6297.8     0.028548     0.025406     0.031210
-------------------------------------------------------------
-------------------------------------------------------------
Copy:            6575.1     0.028287     0.024334     0.031104
Copy:            7336.1     0.024540     0.021810     0.026680
Copy:            8034.9     0.025197     0.019913     0.031678
Copy:            5939.2     0.030293     0.026940     0.033019
-------------------------------------------------------------
-------------------------------------------------------------
Copy:            6327.6     0.029286     0.025286     0.032945
Scale:           4047.0     0.044573     0.039535     0.047485
Scale:           4911.0     0.041008     0.032580     0.047957
Function    Best Rate MB/s  Avg time     Min time     Max time
Scale:           4120.5     0.043048     0.038830     0.045515
Scale:           5020.5     0.039844     0.031869     0.045111
Scale:           4911.1     0.042228     0.032579     0.046967
Scale:           4825.4     0.046242     0.033158     0.051692
Scale:           4931.4     0.041783     0.032445     0.049392
Scale:           4665.4     0.046624     0.034295     0.052144
Scale:           4852.2     0.040444     0.032975     0.046213
Scale:           4769.3     0.043208     0.033548     0.047088
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
Scale:           4838.8     0.043469     0.033066     0.047426
Scale:           4882.5     0.042514     0.032770     0.046670
Scale:           4743.4     0.040116     0.033731     0.046191
Scale:           5048.9     0.044012     0.031690     0.049350
Function    Best Rate MB/s  Avg time     Min time     Max time
Scale:           4732.6     0.040180     0.033808     0.045895
Scale:           4803.4     0.044715     0.033310     0.049551
Scale:           4948.7     0.041784     0.032332     0.046821
Scale:           5090.9     0.039847     0.031429     0.045783
Scale:           4121.8     0.043735     0.038818     0.046429
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
Scale:           4094.7     0.044398     0.039075     0.047014
Scale:           4170.7     0.043619     0.038363     0.046129
Scale:           4866.2     0.040294     0.032880     0.048162
Scale:           4105.5     0.044394     0.038972     0.048388
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
Scale:           4298.1     0.045935     0.037226     0.052018
Add:             4198.3     0.064811     0.057166     0.068345
Add:             5352.6     0.056165     0.044838     0.065970
Copy:           14007.9     0.027396     0.011422     0.031565
Add:             4366.0     0.067964     0.054970     0.072463
Add:             7145.0     0.057839     0.033590     0.068469
Add:             5703.6     0.058231     0.042079     0.066386
Add:             5805.2     0.061355     0.041342     0.067178
Add:             5314.9     0.056452     0.045156     0.065540
Add:             5531.2     0.061358     0.043390     0.067513
Add:             5100.7     0.059685     0.047052     0.065637
Add:             6572.8     0.058608     0.036514     0.065707
Copy:           10429.5     0.029813     0.015341     0.033316
Copy:           13724.5     0.029748     0.011658     0.034040
Add:             6609.8     0.058673     0.036310     0.065895
Add:             5567.0     0.059690     0.043111     0.065966
Add:             5508.8     0.055313     0.043567     0.065442
Add:             6709.9     0.058813     0.035768     0.065901
Copy:           12703.5     0.028363     0.012595     0.032967
Add:             5418.1     0.055450     0.044296     0.065476
Add:             6605.9     0.058807     0.036331     0.066099
Add:             5791.4     0.058276     0.041441     0.066428
Add:             7165.0     0.056134     0.033496     0.065428
Add:             5934.3     0.059102     0.040443     0.065394
Copy:           13842.3     0.029945     0.011559     0.034357
Copy:           11421.2     0.028477     0.014009     0.032442
Add:             5670.3     0.059559     0.042326     0.065510
Add:             4311.5     0.067761     0.055665     0.071938
Add:             5694.8     0.057022     0.042144     0.071062
Add:             5982.5     0.059253     0.040117     0.066421
Copy:           11402.6     0.028383     0.014032     0.032340
Copy:           10293.4     0.030044     0.015544     0.033392
Add:             6138.6     0.060184     0.039097     0.067892
Triad:           4827.0     0.066917     0.049720     0.071670
Triad:           5726.1     0.054214     0.041913     0.066361
Scale:           8229.7     0.042112     0.019442     0.047693
Triad:           5487.4     0.064155     0.043737     0.069384
Triad:          12928.1     0.057943     0.018564     0.072239
Triad:           6648.9     0.060478     0.036096     0.071523
Triad:           4984.8     0.059157     0.048146     0.066461
Triad:           5700.2     0.053960     0.042104     0.066063
Triad:           5142.4     0.059618     0.046671     0.066262
Triad:           9351.2     0.055765     0.025665     0.067004
Triad:           7661.1     0.059550     0.031327     0.069269
Scale:           8151.6     0.042483     0.019628     0.048634
Scale:           9058.0     0.042672     0.017664     0.048964
Triad:           7782.6     0.059210     0.030838     0.068292
Triad:           4866.2     0.064441     0.049320     0.071388
Triad:           6572.3     0.054678     0.036517     0.069094
Triad:           8155.2     0.058314     0.029429     0.065955
Scale:           8097.6     0.042955     0.019759     0.048782
Triad:           6537.4     0.053823     0.036712     0.066728
Triad:           7680.9     0.057897     0.031246     0.065922
Triad:           6766.5     0.060704     0.035469     0.072125
Triad:           8393.6     0.056695     0.028593     0.066881
Triad:           7395.8     0.059220     0.032451     0.068561
Scale:           9052.4     0.042495     0.017675     0.048809
Scale:           8122.2     0.042472     0.019699     0.048027
Triad:           7205.0     0.058515     0.033310     0.067513
Triad:           6609.6     0.064235     0.036311     0.070836
Triad:           7198.6     0.057480     0.033340     0.068511
Triad:           7505.4     0.058103     0.031977     0.066735
Scale:           7991.6     0.042252     0.020021     0.048020
Scale:           8147.9     0.042425     0.019637     0.048520
Triad:           5927.2     0.060414     0.040491     0.066961
-------------------------------------------------------------
-------------------------------------------------------------
Add:             8866.5     0.057329     0.027068     0.065395
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
Add:             8808.6     0.057942     0.027246     0.065869
Add:             9076.1     0.057258     0.026443     0.065519
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
Add:             8911.6     0.059487     0.026931     0.066343
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
Add:             9095.4     0.057224     0.026387     0.065503
Add:             8832.3     0.058357     0.027173     0.065962
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
Add:             8883.3     0.057846     0.027017     0.065935
Add:             8879.7     0.057943     0.027028     0.065748
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Triad:           9639.8     0.058235     0.024897     0.068191
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Triad:           9086.4     0.056610     0.026413     0.065360
Triad:           8875.7     0.055160     0.027040     0.064993
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Triad:           9761.3     0.056428     0.024587     0.065675
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Triad:           8899.1     0.055234     0.026969     0.065365
Triad:           8942.2     0.056538     0.026839     0.065352
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Triad:           8877.1     0.057284     0.027036     0.066510
Triad:           9012.7     0.056239     0.026629     0.064748
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
START OF JOBSPEC
{"resources": [{"type": "node", "count": 1, "with": [{"type": "slot", "count": 56, "with": [{"type": "core", "count": 1}], "label": "task"}]}], "tasks": [{"command": ["stream_c.exe"], "slot": "task", "count": {"per_slot": 1}}], "attributes": {"system": {"duration": 0, "cwd": "/opt/stream", "shell": {"options": {"rlimit": {"cpu": -1, "fsize": -1, "data": -1, "stack": 8388608, "core": -1, "nofile": 1048576, "as": -1, "rss": -1, "nproc": -1}, "cpu-affinity": "per-task"}}, "constraints": {"hostlist": ["flux-sample-111"]}}, "user": {"study_id": "stream-1-iter-3-node-111"}}, "version": 1}
START OF EVENTLOG
{"timestamp":1724448224.0241694,"name":"init"}
{"timestamp":1724448224.026629,"name":"starting"}
{"timestamp":1724448224.0469851,"name":"shell.init","context":{"service":"0-shell-ff7M8EjH","leader-rank":111,"size":1}}
{"timestamp":1724448224.3340189,"name":"shell.start","context":{"taskmap":{"version":1,"map":[[0,1,56,1]]}}}
{"timestamp":1724448225.5172336,"name":"shell.task-exit","context":{"localid":26,"rank":26,"state":"Exited","pid":208,"wait_status":0,"signaled":0,"exitcode":0}}
{"timestamp":1724448226.5358074,"name":"complete","context":{"status":0}}
{"timestamp":1724448226.5358233,"name":"done"}

