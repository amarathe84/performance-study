-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 12179 microseconds.
   (= 12179 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:           15615.8     0.015034     0.010246     0.022244
Scale:           9741.9     0.021834     0.016424     0.037244
Add:            11662.9     0.031637     0.020578     0.054063
Triad:          10988.5     0.035017     0.021841     0.053805
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 17179 microseconds.
   (= 17179 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:           14868.5     0.011662     0.010761     0.015744
Scale:           9836.0     0.016725     0.016267     0.017545
Add:            11010.2     0.025559     0.021798     0.032787
Triad:          11115.6     0.028063     0.021591     0.046105
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 13197 microseconds.
   (= 13197 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:           14048.6     0.017479     0.011389     0.023398
Scale:           8941.5     0.031967     0.017894     0.037895
Add:             9798.2     0.040230     0.024494     0.053243
Triad:          10859.7     0.034667     0.022100     0.052136
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 11592 microseconds.
   (= 11592 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:           14418.4     0.018460     0.011097     0.023737
Scale:           9285.6     0.028937     0.017231     0.035921
Add:            10160.4     0.038794     0.023621     0.054979
Triad:          10699.1     0.044146     0.022432     0.057380
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 16353 microseconds.
   (= 16353 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:           16178.2     0.017568     0.009890     0.021042
Scale:           9743.0     0.029909     0.016422     0.034686
Add:             8891.2     0.045113     0.026993     0.055369
Triad:          11450.3     0.042586     0.020960     0.054899
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 27505 microseconds.
   (= 27505 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:           14513.8     0.017101     0.011024     0.021724
Scale:           9478.1     0.029655     0.016881     0.036779
Add:            10679.4     0.043221     0.022473     0.053528
Triad:          10930.5     0.040990     0.021957     0.055463
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 26909 microseconds.
   (= 26909 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:           10808.0     0.017934     0.014804     0.021955
Scale:           5962.8     0.032247     0.026833     0.037534
Add:             9583.1     0.040565     0.025044     0.049448
Triad:           7031.9     0.043701     0.034130     0.051476
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 19354 microseconds.
   (= 19354 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:           11696.9     0.017669     0.013679     0.020885
Scale:           6722.7     0.031409     0.023800     0.039558
Add:             6251.0     0.044265     0.038394     0.050595
Triad:           7085.5     0.045094     0.033872     0.051716
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 7344 microseconds.
   (= 7344 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            6828.3     0.026127     0.023432     0.028337
Scale:           4105.2     0.043735     0.038975     0.046991
Add:             3991.0     0.066803     0.060135     0.070700
Triad:           4380.6     0.061888     0.054787     0.066894
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 7483 microseconds.
   (= 7483 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            6863.1     0.025662     0.023313     0.027611
Scale:           4128.2     0.043600     0.038758     0.046636
Add:             3994.8     0.066822     0.060078     0.070650
Triad:           4337.3     0.062364     0.055334     0.066930
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 15681 microseconds.
   (= 15681 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            7534.0     0.023740     0.021237     0.025425
Scale:           3998.4     0.044686     0.040016     0.047452
Add:             4380.2     0.063070     0.054792     0.068507
Triad:           4704.6     0.064274     0.051014     0.070414
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 9716 microseconds.
   (= 9716 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            7052.8     0.025890     0.022686     0.027679
Scale:           3900.5     0.045721     0.041020     0.048649
Add:             4134.1     0.064799     0.058054     0.069536
Triad:           4398.8     0.060959     0.054560     0.066120
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 9121 microseconds.
   (= 9121 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            6911.1     0.026438     0.023151     0.028623
Scale:           3911.5     0.045824     0.040905     0.049093
Add:             4159.9     0.065052     0.057694     0.069850
Triad:           4385.7     0.061022     0.054723     0.065369
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 19243 microseconds.
   (= 19243 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            7478.4     0.023725     0.021395     0.025309
Scale:           4235.3     0.042074     0.037778     0.045103
Add:             4509.4     0.065038     0.053222     0.071637
Triad:           6214.1     0.062242     0.038622     0.069936
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 7364 microseconds.
   (= 7364 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            8074.7     0.024570     0.019815     0.026217
Scale:           4516.0     0.046031     0.035430     0.049921
Add:             4107.1     0.067464     0.058435     0.082678
Triad:           4127.3     0.066061     0.058150     0.070038
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 15931 microseconds.
   (= 15931 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            7133.3     0.025214     0.022430     0.026998
Scale:           4006.4     0.044833     0.039936     0.048072
Add:             4350.9     0.061073     0.055161     0.065532
Triad:           4495.2     0.065412     0.053390     0.071349
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 7244 microseconds.
   (= 7244 clock ticks)
-------------------------------------------------------------
Increase the size of the arrays if this shows that
STREAM version $Revision: 5.10 $
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
-------------------------------------------------------------
This system uses 8 bytes per array element.
WARNING -- The above is only a rough guideline.
-------------------------------------------------------------
For best results, please be sure you know the
Array size = 10000000 (elements), Offset = 0 (elements)
precision of your system timer.
Memory per array = 76.3 MiB (= 0.1 GiB).
-------------------------------------------------------------
Total memory required = 228.9 MiB (= 0.2 GiB).
Function    Best Rate MB/s  Avg time     Min time     Max time
Each kernel will be executed 10 times.
Copy:            8303.5     0.024341     0.019269     0.025773
 The *best* time for each kernel (excluding the first iteration)
Scale:           3968.6     0.045773     0.040317     0.048307
 will be used to compute the reported bandwidth.
Add:             4191.0     0.066140     0.057265     0.074431
-------------------------------------------------------------
Triad:           4238.7     0.066038     0.056621     0.070137
Your clock granularity/precision appears to be 1 microseconds.
-------------------------------------------------------------
Each test below will take on the order of 12545 microseconds.
Solution Validates: avg error less than 1.000000e-13 on all three arrays
   (= 12545 clock ticks)
-------------------------------------------------------------
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            8300.5     0.025161     0.019276     0.028291
Scale:           5224.5     0.043094     0.030625     0.048050
Add:             5189.8     0.063388     0.046244     0.070856
Triad:           5328.2     0.059264     0.045043     0.064006
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 16484 microseconds.
   (= 16484 clock ticks)
-------------------------------------------------------------
Increase the size of the arrays if this shows that
STREAM version $Revision: 5.10 $
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
-------------------------------------------------------------
This system uses 8 bytes per array element.
WARNING -- The above is only a rough guideline.
-------------------------------------------------------------
For best results, please be sure you know the
Array size = 10000000 (elements), Offset = 0 (elements)
precision of your system timer.
Memory per array = 76.3 MiB (= 0.1 GiB).
-------------------------------------------------------------
Total memory required = 228.9 MiB (= 0.2 GiB).
Function    Best Rate MB/s  Avg time     Min time     Max time
Each kernel will be executed 10 times.
Copy:            8385.8     0.023211     0.019080     0.025749
 The *best* time for each kernel (excluding the first iteration)
Scale:           5185.7     0.044040     0.030854     0.049364
 will be used to compute the reported bandwidth.
Add:             5644.9     0.059922     0.042516     0.066886
-------------------------------------------------------------
Triad:           6804.6     0.060561     0.035270     0.070194
Your clock granularity/precision appears to be 1 microseconds.
-------------------------------------------------------------
Each test below will take on the order of 20325 microseconds.
Solution Validates: avg error less than 1.000000e-13 on all three arrays
   (= 20325 clock ticks)
-------------------------------------------------------------
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            7258.2     0.024321     0.022044     0.025706
Scale:           4213.2     0.042361     0.037976     0.045593
Add:             4378.3     0.061655     0.054816     0.066315
Triad:           5052.3     0.067264     0.047503     0.075201
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 14166 microseconds.
   (= 14166 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            7159.5     0.024702     0.022348     0.026084
Scale:           4211.4     0.042824     0.037992     0.045466
Add:             4128.0     0.065613     0.058140     0.070072
Triad:           4278.6     0.067412     0.056093     0.071483
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 30203 microseconds.
   (= 30203 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            9330.5     0.024640     0.017148     0.030235
Scale:           5566.0     0.040583     0.028746     0.048350
Add:             6193.1     0.054351     0.038753     0.066058
Triad:           5827.4     0.052968     0.041185     0.065118
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 9011 microseconds.
   (= 9011 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
precision of your system timer.
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            7395.5     0.024816     0.021635     0.026708
Scale:           3830.7     0.048284     0.041768     0.051771
Add:             4144.6     0.065505     0.057907     0.068898
Triad:           4201.0     0.064169     0.057130     0.067931
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
Array size = 10000000 (elements), Offset = 0 (elements)
-------------------------------------------------------------
Memory per array = 76.3 MiB (= 0.1 GiB).
This system uses 8 bytes per array element.
Total memory required = 228.9 MiB (= 0.2 GiB).
-------------------------------------------------------------
Each kernel will be executed 10 times.
Array size = 10000000 (elements), Offset = 0 (elements)
 The *best* time for each kernel (excluding the first iteration)
Memory per array = 76.3 MiB (= 0.1 GiB).
 will be used to compute the reported bandwidth.
Total memory required = 228.9 MiB (= 0.2 GiB).
-------------------------------------------------------------
Each kernel will be executed 10 times.
Your clock granularity/precision appears to be 1 microseconds.
 The *best* time for each kernel (excluding the first iteration)
Each test below will take on the order of 31615 microseconds.
 will be used to compute the reported bandwidth.
   (= 31615 clock ticks)
-------------------------------------------------------------
Increase the size of the arrays if this shows that
Your clock granularity/precision appears to be 1 microseconds.
you are not getting at least 20 clock ticks per test.
Each test below will take on the order of 11251 microseconds.
-------------------------------------------------------------
   (= 11251 clock ticks)
WARNING -- The above is only a rough guideline.
Increase the size of the arrays if this shows that
For best results, please be sure you know the
you are not getting at least 20 clock ticks per test.
precision of your system timer.
-------------------------------------------------------------
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
Function    Best Rate MB/s  Avg time     Min time     Max time
For best results, please be sure you know the
Copy:            9380.9     0.024505     0.017056     0.029853
precision of your system timer.
Scale:           5637.6     0.040322     0.028381     0.048125
-------------------------------------------------------------
Add:             5903.6     0.055336     0.040653     0.065724
Function    Best Rate MB/s  Avg time     Min time     Max time
Triad:           6009.1     0.053930     0.039939     0.065308
Copy:            8472.8     0.024728     0.018884     0.027608
-------------------------------------------------------------
Scale:           5138.9     0.043450     0.031135     0.047828
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Add:             4972.4     0.065199     0.048266     0.070734
-------------------------------------------------------------
Triad:           4869.6     0.060789     0.049285     0.063921
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 9892 microseconds.
   (= 9892 clock ticks)
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
-------------------------------------------------------------
For best results, please be sure you know the
STREAM version $Revision: 5.10 $
precision of your system timer.
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
This system uses 8 bytes per array element.
Function    Best Rate MB/s  Avg time     Min time     Max time
-------------------------------------------------------------
-------------------------------------------------------------
Copy:            6861.1     0.025994     0.023320     0.028358
This system uses 8 bytes per array element.
Array size = 10000000 (elements), Offset = 0 (elements)
Scale:           4087.9     0.045486     0.039140     0.049447
-------------------------------------------------------------
Memory per array = 76.3 MiB (= 0.1 GiB).
Add:             4122.0     0.065822     0.058224     0.069098
Array size = 10000000 (elements), Offset = 0 (elements)
Total memory required = 228.9 MiB (= 0.2 GiB).
Triad:           4576.7     0.066388     0.052439     0.083608
Memory per array = 76.3 MiB (= 0.1 GiB).
Each kernel will be executed 10 times.
-------------------------------------------------------------
Total memory required = 228.9 MiB (= 0.2 GiB).
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
 The *best* time for each kernel (excluding the first iteration)
-------------------------------------------------------------
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Each kernel will be executed 10 times.
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
 The *best* time for each kernel (excluding the first iteration)
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
-------------------------------------------------------------
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
Your clock granularity/precision appears to be 1 microseconds.
STREAM version $Revision: 5.10 $
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
STREAM version $Revision: 5.10 $
-------------------------------------------------------------
-------------------------------------------------------------
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
STREAM version $Revision: 5.10 $
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
STREAM version $Revision: 5.10 $
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
STREAM version $Revision: 5.10 $
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
-------------------------------------------------------------
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
STREAM version $Revision: 5.10 $
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
This system uses 8 bytes per array element.
-------------------------------------------------------------
Each test below will take on the order of 25156 microseconds.
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
This system uses 8 bytes per array element.
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
   (= 25156 clock ticks)
This system uses 8 bytes per array element.
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
This system uses 8 bytes per array element.
Each test below will take on the order of 18783 microseconds.
Array size = 10000000 (elements), Offset = 0 (elements)
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
This system uses 8 bytes per array element.
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
This system uses 8 bytes per array element.
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
This system uses 8 bytes per array element.
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
-------------------------------------------------------------
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
This system uses 8 bytes per array element.
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Increase the size of the arrays if this shows that
-------------------------------------------------------------
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
-------------------------------------------------------------
   (= 18783 clock ticks)
Memory per array = 76.3 MiB (= 0.1 GiB).
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
-------------------------------------------------------------
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
-------------------------------------------------------------
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
-------------------------------------------------------------
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Array size = 10000000 (elements), Offset = 0 (elements)
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
-------------------------------------------------------------
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Array size = 10000000 (elements), Offset = 0 (elements)
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Array size = 10000000 (elements), Offset = 0 (elements)
Increase the size of the arrays if this shows that
Total memory required = 228.9 MiB (= 0.2 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
you are not getting at least 20 clock ticks per test.
Total memory required = 228.9 MiB (= 0.2 GiB).
Array size = 10000000 (elements), Offset = 0 (elements)
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Array size = 10000000 (elements), Offset = 0 (elements)
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Array size = 10000000 (elements), Offset = 0 (elements)
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Array size = 10000000 (elements), Offset = 0 (elements)
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Total memory required = 228.9 MiB (= 0.2 GiB).
Memory per array = 76.3 MiB (= 0.1 GiB).
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Memory per array = 76.3 MiB (= 0.1 GiB).
you are not getting at least 20 clock ticks per test.
Each kernel will be executed 10 times.
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
-------------------------------------------------------------
Each kernel will be executed 10 times.
Memory per array = 76.3 MiB (= 0.1 GiB).
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Memory per array = 76.3 MiB (= 0.1 GiB).
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Memory per array = 76.3 MiB (= 0.1 GiB).
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Total memory required = 228.9 MiB (= 0.2 GiB).
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Memory per array = 76.3 MiB (= 0.1 GiB).
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Each kernel will be executed 10 times.
Total memory required = 228.9 MiB (= 0.2 GiB).
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
Total memory required = 228.9 MiB (= 0.2 GiB).
-------------------------------------------------------------
 The *best* time for each kernel (excluding the first iteration)
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
WARNING -- The above is only a rough guideline.
 The *best* time for each kernel (excluding the first iteration)
Total memory required = 228.9 MiB (= 0.2 GiB).
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
Total memory required = 228.9 MiB (= 0.2 GiB).
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
Total memory required = 228.9 MiB (= 0.2 GiB).
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
Each kernel will be executed 10 times.
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
Total memory required = 228.9 MiB (= 0.2 GiB).
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
 The *best* time for each kernel (excluding the first iteration)
Each kernel will be executed 10 times.
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
Each kernel will be executed 10 times.
WARNING -- The above is only a rough guideline.
 will be used to compute the reported bandwidth.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
For best results, please be sure you know the
 will be used to compute the reported bandwidth.
Each kernel will be executed 10 times.
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
Each kernel will be executed 10 times.
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
Each kernel will be executed 10 times.
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
 The *best* time for each kernel (excluding the first iteration)
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
Each kernel will be executed 10 times.
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
 will be used to compute the reported bandwidth.
 The *best* time for each kernel (excluding the first iteration)
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
 The *best* time for each kernel (excluding the first iteration)
For best results, please be sure you know the
-------------------------------------------------------------
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
-------------------------------------------------------------
precision of your system timer.
-------------------------------------------------------------
 The *best* time for each kernel (excluding the first iteration)
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
 The *best* time for each kernel (excluding the first iteration)
-------------------------------------------------------------
-------------------------------------------------------------
 The *best* time for each kernel (excluding the first iteration)
-------------------------------------------------------------
-------------------------------------------------------------
 will be used to compute the reported bandwidth.
-------------------------------------------------------------
-------------------------------------------------------------
 The *best* time for each kernel (excluding the first iteration)
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
 will be used to compute the reported bandwidth.
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
 will be used to compute the reported bandwidth.
precision of your system timer.
Your clock granularity/precision appears to be 1 microseconds.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
 will be used to compute the reported bandwidth.
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
 will be used to compute the reported bandwidth.
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
 will be used to compute the reported bandwidth.
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
-------------------------------------------------------------
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
 will be used to compute the reported bandwidth.
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
-------------------------------------------------------------
Each test below will take on the order of 31174 microseconds.
Each test below will take on the order of 27201 microseconds.
Each test below will take on the order of 30257 microseconds.
-------------------------------------------------------------
-------------------------------------------------------------
Each test below will take on the order of 33597 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 28544 microseconds.
Each test below will take on the order of 23283 microseconds.
Function    Best Rate MB/s  Avg time     Min time     Max time
Each test below will take on the order of 22020 microseconds.
-------------------------------------------------------------
Each test below will take on the order of 37208 microseconds.
Each test below will take on the order of 14827 microseconds.
Each test below will take on the order of 36653 microseconds.
-------------------------------------------------------------
Each test below will take on the order of 27846 microseconds.
Each test below will take on the order of 21022 microseconds.
-------------------------------------------------------------
Each test below will take on the order of 25911 microseconds.
Each test below will take on the order of 33389 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
Each test below will take on the order of 16124 microseconds.
Each test below will take on the order of 29641 microseconds.
-------------------------------------------------------------
Each test below will take on the order of 34029 microseconds.
Each test below will take on the order of 18115 microseconds.
Each test below will take on the order of 14920 microseconds.
Each test below will take on the order of 19150 microseconds.
Your clock granularity/precision appears to be 1 microseconds.
   (= 31174 clock ticks)
   (= 27201 clock ticks)
   (= 30257 clock ticks)
Your clock granularity/precision appears to be 1 microseconds.
Function    Best Rate MB/s  Avg time     Min time     Max time
   (= 33597 clock ticks)
Each test below will take on the order of 29680 microseconds.
   (= 28544 clock ticks)
   (= 23283 clock ticks)
Copy:            8410.1     0.024108     0.019025     0.026626
   (= 22020 clock ticks)
Your clock granularity/precision appears to be 1 microseconds.
   (= 37208 clock ticks)
   (= 14827 clock ticks)
   (= 36653 clock ticks)
Your clock granularity/precision appears to be 1 microseconds.
   (= 27846 clock ticks)
   (= 21022 clock ticks)
Your clock granularity/precision appears to be 1 microseconds.
   (= 25911 clock ticks)
   (= 33389 clock ticks)
Each test below will take on the order of 33095 microseconds.
   (= 16124 clock ticks)
   (= 29641 clock ticks)
Your clock granularity/precision appears to be 1 microseconds.
   (= 34029 clock ticks)
   (= 18115 clock ticks)
   (= 14920 clock ticks)
   (= 19150 clock ticks)
Each test below will take on the order of 33074 microseconds.
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
Each test below will take on the order of 29195 microseconds.
Copy:            7699.7     0.024000     0.020780     0.025126
Increase the size of the arrays if this shows that
   (= 29680 clock ticks)
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
Scale:           4915.6     0.041538     0.032549     0.045731
Increase the size of the arrays if this shows that
Each test below will take on the order of 29306 microseconds.
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
Each test below will take on the order of 28990 microseconds.
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
Each test below will take on the order of 32845 microseconds.
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
   (= 33095 clock ticks)
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
Each test below will take on the order of 32181 microseconds.
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
Increase the size of the arrays if this shows that
   (= 33074 clock ticks)
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
   (= 29195 clock ticks)
Scale:           4149.5     0.044240     0.038559     0.047332
you are not getting at least 20 clock ticks per test.
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
Add:             6237.2     0.059156     0.038479     0.064939
you are not getting at least 20 clock ticks per test.
   (= 29306 clock ticks)
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
   (= 28990 clock ticks)
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
   (= 32845 clock ticks)
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
Increase the size of the arrays if this shows that
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
   (= 32181 clock ticks)
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
you are not getting at least 20 clock ticks per test.
Increase the size of the arrays if this shows that
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
Increase the size of the arrays if this shows that
Add:             4591.1     0.067929     0.052275     0.073177
-------------------------------------------------------------
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
-------------------------------------------------------------
Triad:           8214.4     0.064153     0.029217     0.074041
-------------------------------------------------------------
Increase the size of the arrays if this shows that
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
Increase the size of the arrays if this shows that
-------------------------------------------------------------
-------------------------------------------------------------
Increase the size of the arrays if this shows that
-------------------------------------------------------------
-------------------------------------------------------------
you are not getting at least 20 clock ticks per test.
-------------------------------------------------------------
-------------------------------------------------------------
Increase the size of the arrays if this shows that
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
you are not getting at least 20 clock ticks per test.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
you are not getting at least 20 clock ticks per test.
Triad:           7413.6     0.061745     0.032373     0.068384
WARNING -- The above is only a rough guideline.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
you are not getting at least 20 clock ticks per test.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
you are not getting at least 20 clock ticks per test.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
you are not getting at least 20 clock ticks per test.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
-------------------------------------------------------------
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
you are not getting at least 20 clock ticks per test.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
WARNING -- The above is only a rough guideline.
-------------------------------------------------------------
For best results, please be sure you know the
For best results, please be sure you know the
For best results, please be sure you know the
-------------------------------------------------------------
-------------------------------------------------------------
For best results, please be sure you know the
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
For best results, please be sure you know the
Solution Validates: avg error less than 1.000000e-13 on all three arrays
For best results, please be sure you know the
-------------------------------------------------------------
For best results, please be sure you know the
For best results, please be sure you know the
For best results, please be sure you know the
-------------------------------------------------------------
For best results, please be sure you know the
For best results, please be sure you know the
-------------------------------------------------------------
For best results, please be sure you know the
For best results, please be sure you know the
WARNING -- The above is only a rough guideline.
For best results, please be sure you know the
For best results, please be sure you know the
-------------------------------------------------------------
For best results, please be sure you know the
For best results, please be sure you know the
For best results, please be sure you know the
For best results, please be sure you know the
WARNING -- The above is only a rough guideline.
precision of your system timer.
precision of your system timer.
precision of your system timer.
WARNING -- The above is only a rough guideline.
Solution Validates: avg error less than 1.000000e-13 on all three arrays
precision of your system timer.
For best results, please be sure you know the
precision of your system timer.
precision of your system timer.
-------------------------------------------------------------
precision of your system timer.
WARNING -- The above is only a rough guideline.
precision of your system timer.
precision of your system timer.
precision of your system timer.
WARNING -- The above is only a rough guideline.
precision of your system timer.
precision of your system timer.
WARNING -- The above is only a rough guideline.
precision of your system timer.
precision of your system timer.
For best results, please be sure you know the
precision of your system timer.
precision of your system timer.
WARNING -- The above is only a rough guideline.
precision of your system timer.
precision of your system timer.
precision of your system timer.
precision of your system timer.
For best results, please be sure you know the
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
For best results, please be sure you know the
-------------------------------------------------------------
-------------------------------------------------------------
precision of your system timer.
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
For best results, please be sure you know the
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
For best results, please be sure you know the
-------------------------------------------------------------
-------------------------------------------------------------
For best results, please be sure you know the
-------------------------------------------------------------
-------------------------------------------------------------
precision of your system timer.
-------------------------------------------------------------
-------------------------------------------------------------
For best results, please be sure you know the
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
precision of your system timer.
Function    Best Rate MB/s  Avg time     Min time     Max time
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
precision of your system timer.
Function    Best Rate MB/s  Avg time     Min time     Max time
precision of your system timer.
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
precision of your system timer.
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
precision of your system timer.
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
-------------------------------------------------------------
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
precision of your system timer.
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            8070.1     0.025464     0.019826     0.028468
Copy:            8424.5     0.027693     0.018992     0.034606
-------------------------------------------------------------
Copy:            8179.5     0.027149     0.019561     0.034155
Copy:            8456.3     0.026052     0.018921     0.031843
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            8399.0     0.024868     0.019050     0.031359
Copy:            9352.4     0.025148     0.017108     0.028619
-------------------------------------------------------------
Copy:            8340.2     0.024050     0.019184     0.027971
-------------------------------------------------------------
Copy:            6035.7     0.028431     0.026509     0.031337
Copy:            7252.3     0.026015     0.022062     0.027956
Copy:            6153.3     0.028686     0.026002     0.031912
-------------------------------------------------------------
Copy:            5692.3     0.029969     0.028108     0.032484
Copy:            7422.2     0.024707     0.021557     0.026358
-------------------------------------------------------------
Copy:            6408.5     0.028072     0.024967     0.031237
Copy:            6696.8     0.027890     0.023892     0.030884
Function    Best Rate MB/s  Avg time     Min time     Max time
Copy:            8004.8     0.025723     0.019988     0.028109
Copy:            6662.2     0.028141     0.024016     0.031417
-------------------------------------------------------------
Copy:            8543.3     0.025893     0.018728     0.032729
Copy:            7023.4     0.025279     0.022781     0.027795
Copy:            7584.4     0.025964     0.021096     0.028143
Copy:            7125.7     0.027730     0.022454     0.031906
Scale:           5267.0     0.041102     0.030378     0.045381
Scale:           4994.1     0.039655     0.032038     0.047654
Function    Best Rate MB/s  Avg time     Min time     Max time
Scale:           5150.1     0.039811     0.031067     0.047680
Scale:           5161.6     0.039913     0.030998     0.047720
Copy:           10488.4     0.030726     0.015255     0.034960
Scale:           5249.2     0.039454     0.030481     0.047454
Scale:           4953.2     0.042819     0.032302     0.047797
Function    Best Rate MB/s  Avg time     Min time     Max time
Scale:           4935.2     0.042746     0.032420     0.050872
Function    Best Rate MB/s  Avg time     Min time     Max time
Scale:           5079.7     0.042701     0.031498     0.046569
Scale:           4132.5     0.043625     0.038717     0.045580
Scale:           5111.0     0.042634     0.031305     0.046491
Function    Best Rate MB/s  Avg time     Min time     Max time
Scale:           5203.7     0.043606     0.030747     0.050034
Scale:           4173.4     0.042884     0.038338     0.045594
Function    Best Rate MB/s  Avg time     Min time     Max time
Scale:           4450.5     0.045781     0.035951     0.050270
Scale:           4179.2     0.043584     0.038285     0.047940
Copy:           10805.7     0.028880     0.014807     0.033095
Scale:           4866.5     0.046265     0.032878     0.052416
Scale:           4095.1     0.043983     0.039071     0.047538
Function    Best Rate MB/s  Avg time     Min time     Max time
Scale:           5276.1     0.039531     0.030325     0.047676
Scale:           3696.3     0.048465     0.043287     0.052386
Scale:           5033.2     0.046342     0.031789     0.052694
Scale:           4670.5     0.045425     0.034258     0.058824
Add:             5557.5     0.056722     0.043185     0.065502
Copy:           11471.2     0.029930     0.013948     0.033945
Add:             5437.4     0.054973     0.044139     0.065762
Add:             6713.7     0.056801     0.035748     0.066912
Scale:           8161.1     0.041911     0.019605     0.047436
Add:             6818.8     0.057281     0.035197     0.067335
Add:             6033.3     0.060281     0.039779     0.065973
Copy:           12804.1     0.027892     0.012496     0.031803
Add:             6407.0     0.057006     0.037459     0.066121
Copy:           12487.2     0.029855     0.012813     0.033873
Add:             6778.3     0.058409     0.035407     0.066609
Add:             4112.3     0.065950     0.058361     0.069713
Add:             6842.1     0.058293     0.035077     0.066445
Add:             6055.7     0.057305     0.039632     0.065610
Copy:           11914.6     0.030126     0.013429     0.033971
Add:             6892.4     0.058542     0.034821     0.066699
Add:             3984.4     0.069249     0.060235     0.073525
Copy:           11967.1     0.027791     0.013370     0.032458
Add:             6603.6     0.059046     0.036344     0.066477
Add:             6480.0     0.058712     0.037037     0.065545
Scale:           8069.8     0.042010     0.019827     0.047347
Add:             5868.1     0.059402     0.040899     0.065512
Add:             4294.5     0.061108     0.055886     0.065828
Copy:           12731.7     0.028109     0.012567     0.032298
Add:             5563.8     0.054880     0.043136     0.066128
Add:             6139.7     0.060016     0.039090     0.066425
Add:             4636.2     0.062064     0.051766     0.065841
Add:             7057.8     0.059120     0.034005     0.067138
Scale:           8217.0     0.042448     0.019472     0.048029
Triad:           6260.7     0.053051     0.038334     0.065720
Triad:           9658.3     0.056852     0.024849     0.068063
Add:             9527.3     0.056770     0.025191     0.065129
Triad:          11819.7     0.059002     0.020305     0.075934
Triad:           6157.0     0.060159     0.038980     0.071655
Scale:           8072.2     0.041873     0.019821     0.046997
Triad:          11047.7     0.055846     0.021724     0.065658
Scale:           8377.9     0.042479     0.019098     0.048153
Triad:           8163.0     0.059287     0.029401     0.069181
Triad:           4650.5     0.065708     0.051607     0.071667
Triad:           8206.3     0.059308     0.029246     0.069309
Triad:           6241.5     0.062031     0.038452     0.074069
Scale:           8401.6     0.042620     0.019044     0.048414
Triad:           8307.4     0.058745     0.028890     0.073584
Triad:          11730.3     0.061366     0.020460     0.069742
Scale:           8175.3     0.042887     0.019571     0.048276
Triad:           7541.2     0.057265     0.031825     0.065686
Triad:           8346.4     0.058562     0.028755     0.068473
Add:             9357.8     0.057123     0.025647     0.065198
Triad:           6273.0     0.059225     0.038259     0.065506
Triad:           6693.8     0.059124     0.035854     0.068042
Scale:           8371.2     0.042728     0.019113     0.048121
Triad:           6299.7     0.054067     0.038097     0.067297
Triad:           6609.4     0.058192     0.036312     0.065778
Triad:           6786.9     0.059129     0.035362     0.065626
Triad:           7433.6     0.055270     0.032286     0.066065
Triad:           9089.2     0.059767     0.026405     0.069439
-------------------------------------------------------------
Triad:           9766.4     0.056031     0.024574     0.065886
-------------------------------------------------------------
-------------------------------------------------------------
Add:             8808.0     0.058070     0.027248     0.065539
-------------------------------------------------------------
Add:             8909.0     0.057959     0.026939     0.065480
Add:             6320.6     0.060196     0.037971     0.065195
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
Add:             8923.3     0.057901     0.026896     0.065393
-------------------------------------------------------------
-------------------------------------------------------------
Add:             9862.8     0.058116     0.024334     0.065143
-------------------------------------------------------------
-------------------------------------------------------------
Triad:           9747.4     0.056616     0.024622     0.066831
-------------------------------------------------------------
-------------------------------------------------------------
Add:             8908.0     0.058096     0.026942     0.065380
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Triad:           8506.1     0.058367     0.028215     0.069108
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Triad:           9164.5     0.055877     0.026188     0.066200
Triad:           9956.8     0.055518     0.024104     0.065787
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Triad:           9123.4     0.055470     0.026306     0.065903
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Triad:           9740.2     0.057392     0.024640     0.065887
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Triad:           9223.7     0.056669     0.026020     0.066527
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
Solution Validates: avg error less than 1.000000e-13 on all three arrays
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
START OF JOBSPEC
{"resources": [{"type": "node", "count": 1, "with": [{"type": "slot", "count": 56, "with": [{"type": "core", "count": 1}], "label": "task"}]}], "tasks": [{"command": ["stream_c.exe"], "slot": "task", "count": {"per_slot": 1}}], "attributes": {"system": {"duration": 0, "cwd": "/opt/stream", "shell": {"options": {"rlimit": {"cpu": -1, "fsize": -1, "data": -1, "stack": 8388608, "core": -1, "nofile": 1048576, "as": -1, "rss": -1, "nproc": -1}, "cpu-affinity": "per-task"}}, "constraints": {"hostlist": ["flux-sample-111"]}}, "user": {"study_id": "stream-1-iter-4-node-111"}}, "version": 1}
START OF EVENTLOG
{"timestamp":1724448240.4839003,"name":"init"}
{"timestamp":1724448240.4859657,"name":"starting"}
{"timestamp":1724448240.5076776,"name":"shell.init","context":{"service":"0-shell-fnN4LRzo","leader-rank":111,"size":1}}
{"timestamp":1724448240.7940683,"name":"shell.start","context":{"taskmap":{"version":1,"map":[[0,1,56,1]]}}}
{"timestamp":1724448241.8414462,"name":"shell.task-exit","context":{"localid":26,"rank":26,"state":"Exited","pid":265,"wait_status":0,"signaled":0,"exitcode":0}}
{"timestamp":1724448242.9988806,"name":"complete","context":{"status":0}}
{"timestamp":1724448242.9988971,"name":"done"}

